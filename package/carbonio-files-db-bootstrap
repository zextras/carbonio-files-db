#!/bin/bash

# This script just create credentials, write them in consul and initialize an empty schema

MAIN_SERVICE_NAME="carbonio-files"
DB_SERVICE_NAME="carbonio-files-db"
DATABASE_NAME="${DB_SERVICE_NAME}"
DATABASE_USERNAME="${DB_SERVICE_NAME}"
DATABASE_PASSWORD="" #defined later
CONSUL_TOKEN_PATH="/etc/carbonio/files-db/service-discover/token"


# ==================
# Utility functions
# ==================
function syntax() {
    echo "Syntax: [PGPASSWORD=password] $0 username [host] [port]"
    exit 1
}

function check_postgres_connection() {
  set +e
  psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${ROOT_DB_USERNAME}" "${NOT_ASK_FOR_PGPASSWORD}"  -tAq -c "SELECT 1;" &>/dev/null
  PSQL_EXIT_CODE="$?"

  # If the psql command exited with an error then the script stops
  if [[ "$PSQL_EXIT_CODE" == "1" || "$PSQL_EXIT_CODE" == "2" || "$PSQL_EXIT_CODE" == "3" ]]; then
    echo "psql: FATAL ERROR (exit code $PSQL_EXIT_CODE)."
    echo "(see EXIT STATUS section in psql man documentation)"
    exit 1
  fi

  echo "OK"
  set -e
}

function save_credential_on_consul_if_not_exist() {
  set +e
  consul kv get -token-file="${CONSUL_TOKEN_PATH}" "${MAIN_SERVICE_NAME}/$1" &>/dev/null
  CONSUL_CLI_EXIT_CODE="$?"

  if [ "$CONSUL_CLI_EXIT_CODE" != "0" ]; then
    consul kv put -token-file="${CONSUL_TOKEN_PATH}" "${MAIN_SERVICE_NAME}/$1" "$2" &>/dev/null
  fi

  consul kv get -token-file="${CONSUL_TOKEN_PATH}" "${MAIN_SERVICE_NAME}/$1"
  set -e
}


# ====================
# Start of the script
# ====================
set -e

if [[ $(id -u) -ne 0 ]]; then
  echo "Please run as root"
  exit 1
fi

if [[ -z "$1" ]]; then
  syntax;
fi


# ============================
# Define postgres credentials
# ============================
NOT_ASK_FOR_PGPASSWORD='-w'
if [[ -z "${PGPASSWORD}" ]]; then
  NOT_ASK_FOR_PGPASSWORD=''
fi

ROOT_DB_USERNAME="$1"
POSTGRES_HOST=$2
POSTGRES_PORT=$3

if [ -z "${POSTGRES_HOST}" ]; then
  POSTGRES_HOST="localhost";
fi

if [ -z "${POSTGRES_PORT}" ]; then
  POSTGRES_PORT="5432";
fi

echo "Database: $POSTGRES_HOST:$POSTGRES_PORT user ${ROOT_DB_USERNAME}"

echo "Check postgres connection: $(check_postgres_connection)"


# ============================
# Check if the database exists
# ============================
set +e
CURRENT_VERSION=$(psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${ROOT_DB_USERNAME}" "${NOT_ASK_FOR_PGPASSWORD}" "${DATABASE_NAME}" -tAq 2>/dev/null<<EOF
SELECT version FROM DB_INFO LIMIT 1;
EOF
)

PSQL_EXIT_CODE="$?"

if [ "$PSQL_EXIT_CODE" == "0" ]; then
  echo "Current version is: ${CURRENT_VERSION}."
  echo "Database already initialized! Quitting"
  exit 0
fi

set -e


# =================================
# The database does not exist then:
#  1. save credentials on consul
#  2. create user and database
# =================================

save_credential_on_consul_if_not_exist "db-name" $DATABASE_NAME &>/dev/null
save_credential_on_consul_if_not_exist "db-username" $DATABASE_USERNAME &>/dev/null
DATABASE_PASSWORD=$(save_credential_on_consul_if_not_exist "db-password" "$(openssl rand -hex 16 | tr -d '\n')")

psql -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${ROOT_DB_USERNAME}" "${NOT_ASK_FOR_PGPASSWORD}" <<EOF
CREATE USER "${DATABASE_USERNAME}" WITH PASSWORD  '${DATABASE_PASSWORD}';
CREATE DATABASE "${DATABASE_NAME}" OWNER "${DATABASE_USERNAME}";
EOF

echo "===================================================="
echo "carbonio-files-db database initialized successfully!"
echo "===================================================="